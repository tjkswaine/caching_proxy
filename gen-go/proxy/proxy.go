// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package proxy

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - RedisIP
//  - TTLMs
//  - Capacity
//  - Port
//  - Connections
//  - Spooling
type ProxyConfig struct {
  RedisIP string `thrift:"redis_ip,1" db:"redis_ip" json:"redis_ip"`
  TTLMs int32 `thrift:"ttl_ms,2" db:"ttl_ms" json:"ttl_ms"`
  Capacity int32 `thrift:"capacity,3" db:"capacity" json:"capacity"`
  Port int32 `thrift:"port,4" db:"port" json:"port"`
  Connections int32 `thrift:"connections,5" db:"connections" json:"connections"`
  Spooling int32 `thrift:"spooling,6" db:"spooling" json:"spooling"`
}

func NewProxyConfig() *ProxyConfig {
  return &ProxyConfig{}
}


func (p *ProxyConfig) GetRedisIP() string {
  return p.RedisIP
}

func (p *ProxyConfig) GetTTLMs() int32 {
  return p.TTLMs
}

func (p *ProxyConfig) GetCapacity() int32 {
  return p.Capacity
}

func (p *ProxyConfig) GetPort() int32 {
  return p.Port
}

func (p *ProxyConfig) GetConnections() int32 {
  return p.Connections
}

func (p *ProxyConfig) GetSpooling() int32 {
  return p.Spooling
}
func (p *ProxyConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProxyConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RedisIP = v
}
  return nil
}

func (p *ProxyConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TTLMs = v
}
  return nil
}

func (p *ProxyConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Capacity = v
}
  return nil
}

func (p *ProxyConfig)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *ProxyConfig)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Connections = v
}
  return nil
}

func (p *ProxyConfig)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Spooling = v
}
  return nil
}

func (p *ProxyConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProxyConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProxyConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("redis_ip", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:redis_ip: ", p), err) }
  if err := oprot.WriteString(string(p.RedisIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.redis_ip (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:redis_ip: ", p), err) }
  return err
}

func (p *ProxyConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ttl_ms", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl_ms: ", p), err) }
  if err := oprot.WriteI32(int32(p.TTLMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ttl_ms (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl_ms: ", p), err) }
  return err
}

func (p *ProxyConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capacity", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:capacity: ", p), err) }
  if err := oprot.WriteI32(int32(p.Capacity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capacity (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:capacity: ", p), err) }
  return err
}

func (p *ProxyConfig) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:port: ", p), err) }
  return err
}

func (p *ProxyConfig) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("connections", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:connections: ", p), err) }
  if err := oprot.WriteI32(int32(p.Connections)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.connections (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:connections: ", p), err) }
  return err
}

func (p *ProxyConfig) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spooling", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:spooling: ", p), err) }
  if err := oprot.WriteI32(int32(p.Spooling)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spooling (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:spooling: ", p), err) }
  return err
}

func (p *ProxyConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProxyConfig(%+v)", *p)
}

// Attributes:
//  - RedisIP
type SpoolerConfig struct {
  RedisIP string `thrift:"redis_ip,1" db:"redis_ip" json:"redis_ip"`
}

func NewSpoolerConfig() *SpoolerConfig {
  return &SpoolerConfig{}
}


func (p *SpoolerConfig) GetRedisIP() string {
  return p.RedisIP
}
func (p *SpoolerConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpoolerConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RedisIP = v
}
  return nil
}

func (p *SpoolerConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SpoolerConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpoolerConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("redis_ip", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:redis_ip: ", p), err) }
  if err := oprot.WriteString(string(p.RedisIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.redis_ip (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:redis_ip: ", p), err) }
  return err
}

func (p *SpoolerConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SpoolerConfig(%+v)", *p)
}

// Attributes:
//  - TTLMs
//  - Capacity
//  - SpoolerID
type CacheConfig struct {
  // unused field # 1
  TTLMs int32 `thrift:"ttl_ms,2" db:"ttl_ms" json:"ttl_ms"`
  Capacity int32 `thrift:"capacity,3" db:"capacity" json:"capacity"`
  // unused fields # 4 to 5
  SpoolerID int32 `thrift:"spooler_id,6" db:"spooler_id" json:"spooler_id"`
}

func NewCacheConfig() *CacheConfig {
  return &CacheConfig{}
}


func (p *CacheConfig) GetTTLMs() int32 {
  return p.TTLMs
}

func (p *CacheConfig) GetCapacity() int32 {
  return p.Capacity
}

func (p *CacheConfig) GetSpoolerID() int32 {
  return p.SpoolerID
}
func (p *CacheConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CacheConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TTLMs = v
}
  return nil
}

func (p *CacheConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Capacity = v
}
  return nil
}

func (p *CacheConfig)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SpoolerID = v
}
  return nil
}

func (p *CacheConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CacheConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CacheConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ttl_ms", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl_ms: ", p), err) }
  if err := oprot.WriteI32(int32(p.TTLMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ttl_ms (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl_ms: ", p), err) }
  return err
}

func (p *CacheConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capacity", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:capacity: ", p), err) }
  if err := oprot.WriteI32(int32(p.Capacity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capacity (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:capacity: ", p), err) }
  return err
}

func (p *CacheConfig) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spooler_id", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:spooler_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpoolerID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spooler_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:spooler_id: ", p), err) }
  return err
}

func (p *CacheConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CacheConfig(%+v)", *p)
}

// Attributes:
//  - TTLMus
//  - Capacity
type DisposalConfig struct {
  // unused field # 1
  TTLMus int64 `thrift:"ttl_mus,2" db:"ttl_mus" json:"ttl_mus"`
  Capacity int32 `thrift:"capacity,3" db:"capacity" json:"capacity"`
}

func NewDisposalConfig() *DisposalConfig {
  return &DisposalConfig{}
}


func (p *DisposalConfig) GetTTLMus() int64 {
  return p.TTLMus
}

func (p *DisposalConfig) GetCapacity() int32 {
  return p.Capacity
}
func (p *DisposalConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DisposalConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TTLMus = v
}
  return nil
}

func (p *DisposalConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Capacity = v
}
  return nil
}

func (p *DisposalConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DisposalConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DisposalConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ttl_mus", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl_mus: ", p), err) }
  if err := oprot.WriteI64(int64(p.TTLMus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ttl_mus (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl_mus: ", p), err) }
  return err
}

func (p *DisposalConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capacity", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:capacity: ", p), err) }
  if err := oprot.WriteI32(int32(p.Capacity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capacity (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:capacity: ", p), err) }
  return err
}

func (p *DisposalConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DisposalConfig(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
//  - FetchedTime
type CacheableValue struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
  FetchedTime int32 `thrift:"fetched_time,3" db:"fetched_time" json:"fetched_time"`
}

func NewCacheableValue() *CacheableValue {
  return &CacheableValue{}
}


func (p *CacheableValue) GetKey() string {
  return p.Key
}

func (p *CacheableValue) GetValue() string {
  return p.Value
}

func (p *CacheableValue) GetFetchedTime() int32 {
  return p.FetchedTime
}
func (p *CacheableValue) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CacheableValue)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *CacheableValue)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *CacheableValue)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FetchedTime = v
}
  return nil
}

func (p *CacheableValue) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CacheableValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CacheableValue) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *CacheableValue) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *CacheableValue) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fetched_time", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fetched_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.FetchedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fetched_time (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fetched_time: ", p), err) }
  return err
}

func (p *CacheableValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CacheableValue(%+v)", *p)
}

// Attributes:
//  - RedisIP
type RedisUnavailable struct {
  RedisIP string `thrift:"redis_ip,1" db:"redis_ip" json:"redis_ip"`
}

func NewRedisUnavailable() *RedisUnavailable {
  return &RedisUnavailable{}
}


func (p *RedisUnavailable) GetRedisIP() string {
  return p.RedisIP
}
func (p *RedisUnavailable) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisUnavailable)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RedisIP = v
}
  return nil
}

func (p *RedisUnavailable) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RedisUnavailable"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisUnavailable) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("redis_ip", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:redis_ip: ", p), err) }
  if err := oprot.WriteString(string(p.RedisIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.redis_ip (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:redis_ip: ", p), err) }
  return err
}

func (p *RedisUnavailable) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisUnavailable(%+v)", *p)
}

func (p *RedisUnavailable) Error() string {
  return p.String()
}

type RedisProxy interface {
  // Parameters:
  //  - Config
  Initialize(ctx context.Context, config *ProxyConfig) (r bool, err error)
  // Parameters:
  //  - Key
  GetValue(ctx context.Context, key string) (r string, err error)
}

type RedisProxyClient struct {
  c thrift.TClient
}

// Deprecated: Use NewRedisProxy instead
func NewRedisProxyClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RedisProxyClient {
  return &RedisProxyClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewRedisProxy instead
func NewRedisProxyClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RedisProxyClient {
  return &RedisProxyClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRedisProxyClient(c thrift.TClient) *RedisProxyClient {
  return &RedisProxyClient{
    c: c,
  }
}

// Parameters:
//  - Config
func (p *RedisProxyClient) Initialize(ctx context.Context, config *ProxyConfig) (r bool, err error) {
  var _args0 RedisProxyInitializeArgs
  _args0.Config = config
  var _result1 RedisProxyInitializeResult
  if err = p.c.Call(ctx, "initialize", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Key
func (p *RedisProxyClient) GetValue(ctx context.Context, key string) (r string, err error) {
  var _args2 RedisProxyGetValueArgs
  _args2.Key = key
  var _result3 RedisProxyGetValueResult
  if err = p.c.Call(ctx, "getValue", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type RedisProxyProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RedisProxy
}

func (p *RedisProxyProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RedisProxyProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RedisProxyProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRedisProxyProcessor(handler RedisProxy) *RedisProxyProcessor {

  self4 := &RedisProxyProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["initialize"] = &redisProxyProcessorInitialize{handler:handler}
  self4.processorMap["getValue"] = &redisProxyProcessorGetValue{handler:handler}
return self4
}

func (p *RedisProxyProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x5

}

type redisProxyProcessorInitialize struct {
  handler RedisProxy
}

func (p *redisProxyProcessorInitialize) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RedisProxyInitializeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("initialize", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RedisProxyInitializeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Initialize(ctx, args.Config); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing initialize: " + err2.Error())
    oprot.WriteMessageBegin("initialize", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("initialize", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type redisProxyProcessorGetValue struct {
  handler RedisProxy
}

func (p *redisProxyProcessorGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RedisProxyGetValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RedisProxyGetValueResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetValue(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValue: " + err2.Error())
    oprot.WriteMessageBegin("getValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Config
type RedisProxyInitializeArgs struct {
  Config *ProxyConfig `thrift:"config,1" db:"config" json:"config"`
}

func NewRedisProxyInitializeArgs() *RedisProxyInitializeArgs {
  return &RedisProxyInitializeArgs{}
}

var RedisProxyInitializeArgs_Config_DEFAULT *ProxyConfig
func (p *RedisProxyInitializeArgs) GetConfig() *ProxyConfig {
  if !p.IsSetConfig() {
    return RedisProxyInitializeArgs_Config_DEFAULT
  }
return p.Config
}
func (p *RedisProxyInitializeArgs) IsSetConfig() bool {
  return p.Config != nil
}

func (p *RedisProxyInitializeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisProxyInitializeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Config = &ProxyConfig{}
  if err := p.Config.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *RedisProxyInitializeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("initialize_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisProxyInitializeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("config", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err) }
  if err := p.Config.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err) }
  return err
}

func (p *RedisProxyInitializeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisProxyInitializeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RedisProxyInitializeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRedisProxyInitializeResult() *RedisProxyInitializeResult {
  return &RedisProxyInitializeResult{}
}

var RedisProxyInitializeResult_Success_DEFAULT bool
func (p *RedisProxyInitializeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return RedisProxyInitializeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RedisProxyInitializeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RedisProxyInitializeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisProxyInitializeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RedisProxyInitializeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("initialize_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisProxyInitializeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RedisProxyInitializeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisProxyInitializeResult(%+v)", *p)
}

// Attributes:
//  - Key
type RedisProxyGetValueArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewRedisProxyGetValueArgs() *RedisProxyGetValueArgs {
  return &RedisProxyGetValueArgs{}
}


func (p *RedisProxyGetValueArgs) GetKey() string {
  return p.Key
}
func (p *RedisProxyGetValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisProxyGetValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *RedisProxyGetValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisProxyGetValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *RedisProxyGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisProxyGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RedisProxyGetValueResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRedisProxyGetValueResult() *RedisProxyGetValueResult {
  return &RedisProxyGetValueResult{}
}

var RedisProxyGetValueResult_Success_DEFAULT string
func (p *RedisProxyGetValueResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return RedisProxyGetValueResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RedisProxyGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RedisProxyGetValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisProxyGetValueResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RedisProxyGetValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisProxyGetValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RedisProxyGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisProxyGetValueResult(%+v)", *p)
}


type RedisCache interface {
  // Parameters:
  //  - Config
  Initialize(ctx context.Context, config *CacheConfig) (r bool, err error)
  // Parameters:
  //  - Key
  GetValue(ctx context.Context, key string) (r string, err error)
}

type RedisCacheClient struct {
  c thrift.TClient
}

// Deprecated: Use NewRedisCache instead
func NewRedisCacheClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RedisCacheClient {
  return &RedisCacheClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewRedisCache instead
func NewRedisCacheClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RedisCacheClient {
  return &RedisCacheClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRedisCacheClient(c thrift.TClient) *RedisCacheClient {
  return &RedisCacheClient{
    c: c,
  }
}

// Parameters:
//  - Config
func (p *RedisCacheClient) Initialize(ctx context.Context, config *CacheConfig) (r bool, err error) {
  var _args13 RedisCacheInitializeArgs
  _args13.Config = config
  var _result14 RedisCacheInitializeResult
  if err = p.c.Call(ctx, "initialize", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

// Parameters:
//  - Key
func (p *RedisCacheClient) GetValue(ctx context.Context, key string) (r string, err error) {
  var _args15 RedisCacheGetValueArgs
  _args15.Key = key
  var _result16 RedisCacheGetValueResult
  if err = p.c.Call(ctx, "getValue", &_args15, &_result16); err != nil {
    return
  }
  return _result16.GetSuccess(), nil
}

type RedisCacheProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RedisCache
}

func (p *RedisCacheProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RedisCacheProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RedisCacheProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRedisCacheProcessor(handler RedisCache) *RedisCacheProcessor {

  self17 := &RedisCacheProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self17.processorMap["initialize"] = &redisCacheProcessorInitialize{handler:handler}
  self17.processorMap["getValue"] = &redisCacheProcessorGetValue{handler:handler}
return self17
}

func (p *RedisCacheProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x18 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x18.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x18

}

type redisCacheProcessorInitialize struct {
  handler RedisCache
}

func (p *redisCacheProcessorInitialize) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RedisCacheInitializeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("initialize", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RedisCacheInitializeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Initialize(ctx, args.Config); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing initialize: " + err2.Error())
    oprot.WriteMessageBegin("initialize", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("initialize", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type redisCacheProcessorGetValue struct {
  handler RedisCache
}

func (p *redisCacheProcessorGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RedisCacheGetValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RedisCacheGetValueResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetValue(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValue: " + err2.Error())
    oprot.WriteMessageBegin("getValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Config
type RedisCacheInitializeArgs struct {
  Config *CacheConfig `thrift:"config,1" db:"config" json:"config"`
}

func NewRedisCacheInitializeArgs() *RedisCacheInitializeArgs {
  return &RedisCacheInitializeArgs{}
}

var RedisCacheInitializeArgs_Config_DEFAULT *CacheConfig
func (p *RedisCacheInitializeArgs) GetConfig() *CacheConfig {
  if !p.IsSetConfig() {
    return RedisCacheInitializeArgs_Config_DEFAULT
  }
return p.Config
}
func (p *RedisCacheInitializeArgs) IsSetConfig() bool {
  return p.Config != nil
}

func (p *RedisCacheInitializeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisCacheInitializeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Config = &CacheConfig{}
  if err := p.Config.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *RedisCacheInitializeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("initialize_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisCacheInitializeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("config", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err) }
  if err := p.Config.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err) }
  return err
}

func (p *RedisCacheInitializeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisCacheInitializeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RedisCacheInitializeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRedisCacheInitializeResult() *RedisCacheInitializeResult {
  return &RedisCacheInitializeResult{}
}

var RedisCacheInitializeResult_Success_DEFAULT bool
func (p *RedisCacheInitializeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return RedisCacheInitializeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RedisCacheInitializeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RedisCacheInitializeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisCacheInitializeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RedisCacheInitializeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("initialize_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisCacheInitializeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RedisCacheInitializeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisCacheInitializeResult(%+v)", *p)
}

// Attributes:
//  - Key
type RedisCacheGetValueArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewRedisCacheGetValueArgs() *RedisCacheGetValueArgs {
  return &RedisCacheGetValueArgs{}
}


func (p *RedisCacheGetValueArgs) GetKey() string {
  return p.Key
}
func (p *RedisCacheGetValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisCacheGetValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *RedisCacheGetValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisCacheGetValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *RedisCacheGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisCacheGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RedisCacheGetValueResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRedisCacheGetValueResult() *RedisCacheGetValueResult {
  return &RedisCacheGetValueResult{}
}

var RedisCacheGetValueResult_Success_DEFAULT string
func (p *RedisCacheGetValueResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return RedisCacheGetValueResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RedisCacheGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RedisCacheGetValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisCacheGetValueResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RedisCacheGetValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisCacheGetValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RedisCacheGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisCacheGetValueResult(%+v)", *p)
}


type RedisSpooler interface {
  // Parameters:
  //  - Config
  Initialize(ctx context.Context, config *SpoolerConfig) (r bool, err error)
  // Parameters:
  //  - Key
  GetValue(ctx context.Context, key string) (r *CacheableValue, err error)
}

type RedisSpoolerClient struct {
  c thrift.TClient
}

// Deprecated: Use NewRedisSpooler instead
func NewRedisSpoolerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RedisSpoolerClient {
  return &RedisSpoolerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewRedisSpooler instead
func NewRedisSpoolerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RedisSpoolerClient {
  return &RedisSpoolerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRedisSpoolerClient(c thrift.TClient) *RedisSpoolerClient {
  return &RedisSpoolerClient{
    c: c,
  }
}

// Parameters:
//  - Config
func (p *RedisSpoolerClient) Initialize(ctx context.Context, config *SpoolerConfig) (r bool, err error) {
  var _args26 RedisSpoolerInitializeArgs
  _args26.Config = config
  var _result27 RedisSpoolerInitializeResult
  if err = p.c.Call(ctx, "initialize", &_args26, &_result27); err != nil {
    return
  }
  return _result27.GetSuccess(), nil
}

// Parameters:
//  - Key
func (p *RedisSpoolerClient) GetValue(ctx context.Context, key string) (r *CacheableValue, err error) {
  var _args28 RedisSpoolerGetValueArgs
  _args28.Key = key
  var _result29 RedisSpoolerGetValueResult
  if err = p.c.Call(ctx, "getValue", &_args28, &_result29); err != nil {
    return
  }
  return _result29.GetSuccess(), nil
}

type RedisSpoolerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RedisSpooler
}

func (p *RedisSpoolerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RedisSpoolerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RedisSpoolerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRedisSpoolerProcessor(handler RedisSpooler) *RedisSpoolerProcessor {

  self30 := &RedisSpoolerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self30.processorMap["initialize"] = &redisSpoolerProcessorInitialize{handler:handler}
  self30.processorMap["getValue"] = &redisSpoolerProcessorGetValue{handler:handler}
return self30
}

func (p *RedisSpoolerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x31 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x31.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x31

}

type redisSpoolerProcessorInitialize struct {
  handler RedisSpooler
}

func (p *redisSpoolerProcessorInitialize) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RedisSpoolerInitializeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("initialize", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RedisSpoolerInitializeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Initialize(ctx, args.Config); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing initialize: " + err2.Error())
    oprot.WriteMessageBegin("initialize", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("initialize", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type redisSpoolerProcessorGetValue struct {
  handler RedisSpooler
}

func (p *redisSpoolerProcessorGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RedisSpoolerGetValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RedisSpoolerGetValueResult{}
var retval *CacheableValue
  var err2 error
  if retval, err2 = p.handler.GetValue(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValue: " + err2.Error())
    oprot.WriteMessageBegin("getValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Config
type RedisSpoolerInitializeArgs struct {
  Config *SpoolerConfig `thrift:"config,1" db:"config" json:"config"`
}

func NewRedisSpoolerInitializeArgs() *RedisSpoolerInitializeArgs {
  return &RedisSpoolerInitializeArgs{}
}

var RedisSpoolerInitializeArgs_Config_DEFAULT *SpoolerConfig
func (p *RedisSpoolerInitializeArgs) GetConfig() *SpoolerConfig {
  if !p.IsSetConfig() {
    return RedisSpoolerInitializeArgs_Config_DEFAULT
  }
return p.Config
}
func (p *RedisSpoolerInitializeArgs) IsSetConfig() bool {
  return p.Config != nil
}

func (p *RedisSpoolerInitializeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisSpoolerInitializeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Config = &SpoolerConfig{}
  if err := p.Config.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *RedisSpoolerInitializeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("initialize_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisSpoolerInitializeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("config", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err) }
  if err := p.Config.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err) }
  return err
}

func (p *RedisSpoolerInitializeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisSpoolerInitializeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RedisSpoolerInitializeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRedisSpoolerInitializeResult() *RedisSpoolerInitializeResult {
  return &RedisSpoolerInitializeResult{}
}

var RedisSpoolerInitializeResult_Success_DEFAULT bool
func (p *RedisSpoolerInitializeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return RedisSpoolerInitializeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RedisSpoolerInitializeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RedisSpoolerInitializeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisSpoolerInitializeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RedisSpoolerInitializeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("initialize_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisSpoolerInitializeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RedisSpoolerInitializeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisSpoolerInitializeResult(%+v)", *p)
}

// Attributes:
//  - Key
type RedisSpoolerGetValueArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewRedisSpoolerGetValueArgs() *RedisSpoolerGetValueArgs {
  return &RedisSpoolerGetValueArgs{}
}


func (p *RedisSpoolerGetValueArgs) GetKey() string {
  return p.Key
}
func (p *RedisSpoolerGetValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisSpoolerGetValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *RedisSpoolerGetValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisSpoolerGetValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *RedisSpoolerGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisSpoolerGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RedisSpoolerGetValueResult struct {
  Success *CacheableValue `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRedisSpoolerGetValueResult() *RedisSpoolerGetValueResult {
  return &RedisSpoolerGetValueResult{}
}

var RedisSpoolerGetValueResult_Success_DEFAULT *CacheableValue
func (p *RedisSpoolerGetValueResult) GetSuccess() *CacheableValue {
  if !p.IsSetSuccess() {
    return RedisSpoolerGetValueResult_Success_DEFAULT
  }
return p.Success
}
func (p *RedisSpoolerGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RedisSpoolerGetValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisSpoolerGetValueResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CacheableValue{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RedisSpoolerGetValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisSpoolerGetValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RedisSpoolerGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisSpoolerGetValueResult(%+v)", *p)
}


type RedisDisposal interface {
  // Parameters:
  //  - Config
  Initialize(ctx context.Context, config *DisposalConfig) (r bool, err error)
  CleanCache(ctx context.Context) (r bool, err error)
}

type RedisDisposalClient struct {
  c thrift.TClient
}

// Deprecated: Use NewRedisDisposal instead
func NewRedisDisposalClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RedisDisposalClient {
  return &RedisDisposalClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewRedisDisposal instead
func NewRedisDisposalClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RedisDisposalClient {
  return &RedisDisposalClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRedisDisposalClient(c thrift.TClient) *RedisDisposalClient {
  return &RedisDisposalClient{
    c: c,
  }
}

// Parameters:
//  - Config
func (p *RedisDisposalClient) Initialize(ctx context.Context, config *DisposalConfig) (r bool, err error) {
  var _args39 RedisDisposalInitializeArgs
  _args39.Config = config
  var _result40 RedisDisposalInitializeResult
  if err = p.c.Call(ctx, "initialize", &_args39, &_result40); err != nil {
    return
  }
  return _result40.GetSuccess(), nil
}

func (p *RedisDisposalClient) CleanCache(ctx context.Context) (r bool, err error) {
  var _args41 RedisDisposalCleanCacheArgs
  var _result42 RedisDisposalCleanCacheResult
  if err = p.c.Call(ctx, "cleanCache", &_args41, &_result42); err != nil {
    return
  }
  return _result42.GetSuccess(), nil
}

type RedisDisposalProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RedisDisposal
}

func (p *RedisDisposalProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RedisDisposalProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RedisDisposalProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRedisDisposalProcessor(handler RedisDisposal) *RedisDisposalProcessor {

  self43 := &RedisDisposalProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self43.processorMap["initialize"] = &redisDisposalProcessorInitialize{handler:handler}
  self43.processorMap["cleanCache"] = &redisDisposalProcessorCleanCache{handler:handler}
return self43
}

func (p *RedisDisposalProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x44 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x44.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x44

}

type redisDisposalProcessorInitialize struct {
  handler RedisDisposal
}

func (p *redisDisposalProcessorInitialize) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RedisDisposalInitializeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("initialize", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RedisDisposalInitializeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Initialize(ctx, args.Config); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing initialize: " + err2.Error())
    oprot.WriteMessageBegin("initialize", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("initialize", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type redisDisposalProcessorCleanCache struct {
  handler RedisDisposal
}

func (p *redisDisposalProcessorCleanCache) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RedisDisposalCleanCacheArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("cleanCache", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RedisDisposalCleanCacheResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CleanCache(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cleanCache: " + err2.Error())
    oprot.WriteMessageBegin("cleanCache", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("cleanCache", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Config
type RedisDisposalInitializeArgs struct {
  Config *DisposalConfig `thrift:"config,1" db:"config" json:"config"`
}

func NewRedisDisposalInitializeArgs() *RedisDisposalInitializeArgs {
  return &RedisDisposalInitializeArgs{}
}

var RedisDisposalInitializeArgs_Config_DEFAULT *DisposalConfig
func (p *RedisDisposalInitializeArgs) GetConfig() *DisposalConfig {
  if !p.IsSetConfig() {
    return RedisDisposalInitializeArgs_Config_DEFAULT
  }
return p.Config
}
func (p *RedisDisposalInitializeArgs) IsSetConfig() bool {
  return p.Config != nil
}

func (p *RedisDisposalInitializeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisDisposalInitializeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Config = &DisposalConfig{}
  if err := p.Config.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *RedisDisposalInitializeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("initialize_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisDisposalInitializeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("config", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err) }
  if err := p.Config.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err) }
  return err
}

func (p *RedisDisposalInitializeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisDisposalInitializeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RedisDisposalInitializeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRedisDisposalInitializeResult() *RedisDisposalInitializeResult {
  return &RedisDisposalInitializeResult{}
}

var RedisDisposalInitializeResult_Success_DEFAULT bool
func (p *RedisDisposalInitializeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return RedisDisposalInitializeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RedisDisposalInitializeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RedisDisposalInitializeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisDisposalInitializeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RedisDisposalInitializeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("initialize_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisDisposalInitializeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RedisDisposalInitializeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisDisposalInitializeResult(%+v)", *p)
}

type RedisDisposalCleanCacheArgs struct {
}

func NewRedisDisposalCleanCacheArgs() *RedisDisposalCleanCacheArgs {
  return &RedisDisposalCleanCacheArgs{}
}

func (p *RedisDisposalCleanCacheArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisDisposalCleanCacheArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cleanCache_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisDisposalCleanCacheArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisDisposalCleanCacheArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RedisDisposalCleanCacheResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRedisDisposalCleanCacheResult() *RedisDisposalCleanCacheResult {
  return &RedisDisposalCleanCacheResult{}
}

var RedisDisposalCleanCacheResult_Success_DEFAULT bool
func (p *RedisDisposalCleanCacheResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return RedisDisposalCleanCacheResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RedisDisposalCleanCacheResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RedisDisposalCleanCacheResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RedisDisposalCleanCacheResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RedisDisposalCleanCacheResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cleanCache_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RedisDisposalCleanCacheResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RedisDisposalCleanCacheResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RedisDisposalCleanCacheResult(%+v)", *p)
}


